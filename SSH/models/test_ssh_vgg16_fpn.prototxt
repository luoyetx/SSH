# ***************************************************************** #
# SSH: Single Stage Headless Face Detector
# Test Prototxt
# Written by Mahyar Najibi
# ***************************************************************** #
name: "SSH"

input: "data"
input_shape {
  dim: 1
  dim: 3
  dim: 224
  dim: 224
}

input: "im_info"
input_shape {
  dim: 1
  dim: 3
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

layer {
  name: "pool6"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool6"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

#### FPN #############
# pool6 -> pool6_feat
# conv5_3 -> conv5_3_feat
# conv4_3 -> conv4_3_feat

### pool6_feat

# reduce dim
layer {
  name: "res5c_feat_reduce_dim"
  type: "Convolution"
  bottom: "pool6"
  top: "pool6_feat"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

### conv5_3_feat

# up scale
layer {
  name: "res5c_feat_up_scale"
  type: "Deconvolution"
  bottom: "pool6_feat"
  top: "res5c_feat_up_scale"
  convolution_param {
    kernel_size: 4
    stride: 2
    num_output: 256
    group: 256
    pad: 1
    weight_filler: { type: "bilinear" }
    bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}

# reduce dim
layer {
  name: "res4f_feat_reduce_dim"
  type: "Convolution"
  bottom: "conv5_3"
  top: "res4f_feat_reduce_dim"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

# crop
layer {
  name: "res4f_feat_crop"
  type: "Crop"
  bottom: "res5c_feat_up_scale"
  bottom: "res4f_feat_reduce_dim"
  top: "res5c_feat_up_scale_crop"
  crop_param {
    axis: 2
    offset: 0
  }
}

# add
layer {
  name: "res4f_feat_add"
  type: "Eltwise"
  bottom: "res5c_feat_up_scale_crop"
  bottom: "res4f_feat_reduce_dim"
  top: "res4f_feat_add"
  eltwise_param {
    operation: SUM
  }
}

# fuse
layer {
  name: "res4f_feat"
  type: "Convolution"
  bottom: "res4f_feat_add"
  top: "conv5_3_feat"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

### conv4_3_feat

# up scale
layer {
  name: "res4f_feat_up_scale"
  type: "Deconvolution"
  bottom: "conv5_3_feat"
  top: "res4f_feat_up_scale"
  convolution_param {
    kernel_size: 4
    stride: 2
    num_output: 256
    group: 256
    pad: 1
    weight_filler: { type: "bilinear" }
    bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}

# reduce dim
layer {
  name: "res3d_feat_reduce_dim"
  type: "Convolution"
  bottom: "conv4_3"
  top: "res3d_feat_reduce_dim"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

# crop
layer {
  name: "res3d_feat_crop"
  type: "Crop"
  bottom: "res4f_feat_up_scale"
  bottom: "res3d_feat_reduce_dim"
  top: "res4f_feat_up_scale_crop"
  crop_param {
    axis: 2
    offset: 0
  }
}

# add
layer {
  name: "res3d_feat_add"
  type: "Eltwise"
  bottom: "res4f_feat_up_scale_crop"
  bottom: "res3d_feat_reduce_dim"
  top: "res3d_feat_add"
  eltwise_param {
    operation: SUM
  }
}

# fuse
layer {
  name: "res3d_feat"
  type: "Convolution"
  bottom: "res3d_feat_add"
  top: "conv4_3_feat"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

#========== M3@SSH =========

layer {
  name: "m3@ssh_3x3"
  type: "Convolution"
  bottom: "pool6_feat"
  top: "m3@ssh_3x3_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name:'m3@ssh_3x3_param1'}
  param { lr_mult: 2.0 decay_mult: 0 name:'m3@ssh_3x3_param2'}
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# Dim red
layer {
  name: "m3@ssh_dimred"
  type: "Convolution"
  bottom: "pool6_feat"
  top: "m3@ssh_dimred_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: 'm3@ssh_dimred_param1' }
  param { lr_mult: 2.0 decay_mult: 0 name: 'm3@ssh_dimred_param2'}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m3@ssh_dimred_relu"
  type: "ReLU"
  bottom: "m3@ssh_dimred_output"
  top: "m3@ssh_dimred_output"
}
# 5x5
layer {
  name: "m3@ssh_5x5"
  type: "Convolution"
  bottom: "m3@ssh_dimred_output"
  top: "m3@ssh_5x5_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: 'm3@ssh_5x5_param1'}
  param { lr_mult: 2.0 decay_mult: 0 name: 'm3@ssh_5x5_param2'}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "m3@ssh_7x7-1"
  type: "Convolution"
  bottom: "m3@ssh_dimred_output"
  top: "m3@ssh_7x7-1_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: 'm3@ssh_7x7-1_param1'}
  param { lr_mult: 2.0 decay_mult: 0 name: 'm3@ssh_7x7-1_param2'}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m3@ssh_7x7-1_relu"
  type: "ReLU"
  bottom: "m3@ssh_7x7-1_output"
  top: "m3@ssh_7x7-1_output"
}

layer {
  name: "m3@ssh_7x7"
  type: "Convolution"
  bottom: "m3@ssh_7x7-1_output"
  top: "m3@ssh_7x7_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: 'm3@ssh_7x7_param1'}
  param { lr_mult: 2.0 decay_mult: 0 name: 'm3@ssh_7x7_param2'}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer{
  name: "m3@ssh_output"
  type: "Concat"
  bottom: "m3@ssh_3x3_output"
  bottom: "m3@ssh_5x5_output"
  bottom: "m3@ssh_7x7_output"
  top: "m3@ssh_output"
  concat_param{
      axis: 1
  }
}

layer {
  name: "m3@ssh_output_relu"
  type: "ReLU"
  bottom: "m3@ssh_output"
  top: "m3@ssh_output"
}
layer {
  name: "m3@ssh_cls_score"
  type: "Convolution"
  bottom: "m3@ssh_output"
  top: "m3@ssh_cls_score_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: 'm3@ssh_cls_score_param1'}
  param { lr_mult: 2.0 decay_mult: 0 name: 'm3@ssh_cls_score_param2'}
  convolution_param {
    num_output: 4   # 2(bg/fg) * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m3@ssh_bbox_pred"
  type: "Convolution"
  bottom: "m3@ssh_output"
  top: "m3@ssh_bbox_pred_output"
  param { lr_mult: 1.0 decay_mult: 1.0}
  param { lr_mult: 2.0 decay_mult: 0}
  convolution_param {
    num_output: 8   # 4 * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "m3@ssh_cls_score_output"
   top: "m3@ssh_cls_score_reshape_output"
   name: "m3@ssh_cls_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}


layer {
  name: "m3@ssh_cls_prob"
  type: "Softmax"
  bottom: "m3@ssh_cls_score_reshape_output"
  top: "m3@ssh_cls_prob_output"
}
layer {
  name: 'm3@ssh_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'm3@ssh_cls_prob_output'
  top: 'm3@ssh_cls_prob_reshape_output'
  reshape_param { shape { dim: 0 dim:4  dim: -1 dim: 0 } }
}
layer {
  name: 'm3@ssh_proposal'
  type: 'Python'
  bottom: 'm3@ssh_cls_prob_reshape_output'
  bottom: 'm3@ssh_bbox_pred_output'
  bottom: 'im_info'
  top: 'm3@ssh_boxes'
  top: 'm3@ssh_cls_prob'
  python_param {
    module: 'SSH.layers.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 32,'scales': [16,32], 'ratios':[1,]}"
  }
}


#========== M2@SSH =========

layer {
  name: "m2@ssh_3x3"
  type: "Convolution"
  bottom: "conv5_3_feat"
  top: "m2@ssh_3x3_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_3x3_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_3x3_param2"}
  convolution_param {
    num_output: 256
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# Dim red
layer {
  name: "m2@ssh_dimred"
  type: "Convolution"
  bottom: "conv5_3_feat"
  top: "m2@ssh_dimred_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_dimred_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_dimred_param2"}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m2@ssh_dimred_relu"
  type: "ReLU"
  bottom: "m2@ssh_dimred_output"
  top: "m2@ssh_dimred_output"
}
# 5x5
layer {
  name: "m2@ssh_5x5"
  type: "Convolution"
  bottom: "m2@ssh_dimred_output"
  top: "m2@ssh_5x5_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_5x5_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_5x5_param2"}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "m2@ssh_7x7-1"
  type: "Convolution"
  bottom: "m2@ssh_dimred_output"
  top: "m2@ssh_7x7-1_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_7x7-1_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_7x7-1_param2"}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m2@ssh_7x7-1_relu"
  type: "ReLU"
  bottom: "m2@ssh_7x7-1_output"
  top: "m2@ssh_7x7-1_output"
}

layer {
  name: "m2@ssh_7x7"
  type: "Convolution"
  bottom: "m2@ssh_7x7-1_output"
  top: "m2@ssh_7x7_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_7x7_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_7x7_param2"}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer{
  name: "m2@ssh_output"
  type: "Concat"
  bottom: "m2@ssh_3x3_output"
  bottom: "m2@ssh_5x5_output"
  bottom: "m2@ssh_7x7_output"
  top: "m2@ssh_output"
  concat_param{
      axis: 1
  }
}

layer {
  name: "m2@ssh_output_relu"
  type: "ReLU"
  bottom: "m2@ssh_output"
  top: "m2@ssh_output"
}
layer {
  name: "m2@ssh_cls_score"
  type: "Convolution"
  bottom: "m2@ssh_output"
  top: "m2@ssh_cls_score_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m2@ssh_cls_score_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m2@ssh_cls_score_param2"}
  convolution_param {
    num_output: 4   # 2(bg/fg) * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m2@ssh_bbox_pred"
  type: "Convolution"
  bottom: "m2@ssh_output"
  top: "m2@ssh_bbox_pred_output"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 8   # 4 * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "m2@ssh_cls_score_output"
   top: "m2@ssh_cls_score_reshape_output"
   name: "m2@ssh_cls_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}


layer {
  name: "m2@ssh_cls_prob"
  type: "Softmax"
  bottom: "m2@ssh_cls_score_reshape_output"
  top: "m2@ssh_cls_prob_output"
}
layer {
  name: 'm2@ssh_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'm2@ssh_cls_prob_output'
  top: 'm2@ssh_cls_prob_reshape_output'
  reshape_param { shape { dim: 0 dim:4  dim: -1 dim: 0 } }
}
layer {
  name: 'm2@ssh_proposal'
  type: 'Python'
  bottom: 'm2@ssh_cls_prob_reshape_output'
  bottom: 'm2@ssh_bbox_pred_output'
  bottom: 'im_info'
  top: 'm2@ssh_boxes'
  top: 'm2@ssh_cls_prob'
  python_param {
    module: 'SSH.layers.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 16,'scales': [4,8], 'ratios':[1,]}"
  }
}

#========== M1@SSH =========

layer {
  name: "m1@ssh_3x3"
  type: "Convolution"
  bottom: "conv4_3_feat"
  top: "m1@ssh_3x3_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_3x3_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_3x3_param2"}
  convolution_param {
    num_output: 128
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
# Dim red
layer {
  name: "m1@ssh_dimred"
  type: "Convolution"
  bottom: "conv4_3_feat"
  top: "m1@ssh_dimred_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_dimred_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_dimred_param2"}
  convolution_param {
    num_output: 64
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m1@ssh_dimred_relu"
  type: "ReLU"
  bottom: "m1@ssh_dimred_output"
  top: "m1@ssh_dimred_output"
}
# 5x5
layer {
  name: "m1@ssh_5x5"
  type: "Convolution"
  bottom: "m1@ssh_dimred_output"
  top: "m1@ssh_5x5_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_5x5_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_5x5_param2"}
  convolution_param {
    num_output: 64
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
#7x7
layer {
  name: "m1@ssh_7x7-1"
  type: "Convolution"
  bottom: "m1@ssh_dimred_output"
  top: "m1@ssh_7x7-1_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_7x7-1_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_7x7-1_param2"}
  convolution_param {
    num_output: 64
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m1@ssh_7x7-1_relu"
  type: "ReLU"
  bottom: "m1@ssh_7x7-1_output"
  top: "m1@ssh_7x7-1_output"
}

layer {
  name: "m1@ssh_7x7"
  type: "Convolution"
  bottom: "m1@ssh_7x7-1_output"
  top: "m1@ssh_7x7_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_7x7_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_7x7_param2"}
  convolution_param {
    num_output: 64
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer{
  name: "m1@ssh_output"
  type: "Concat"
  bottom: "m1@ssh_3x3_output"
  bottom: "m1@ssh_5x5_output"
  bottom: "m1@ssh_7x7_output"
  top: "m1@ssh_output"
  concat_param{
      axis: 1
  }
}
layer {
  name: "m1@ssh_output_relu"
  type: "ReLU"
  bottom: "m1@ssh_output"
  top: "m1@ssh_output"
}
layer {
  name: "m1@ssh_cls_score"
  type: "Convolution"
  bottom: "m1@ssh_output"
  top: "m1@ssh_cls_score_output"
  param { lr_mult: 1.0 decay_mult: 1.0 name: "m1@ssh_cls_score_param1"}
  param { lr_mult: 2.0 decay_mult: 0 name: "m1@ssh_cls_score_param2"}
  convolution_param {
    num_output: 4   # 2(bg/fg) * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "m1@ssh_bbox_pred"
  type: "Convolution"
  bottom: "m1@ssh_output"
  top: "m1@ssh_bbox_pred_output"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 8   # 4 * 21(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
   bottom: "m1@ssh_cls_score_output"
   top: "m1@ssh_cls_score_reshape_output"
   name: "m1@ssh_cls_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}


layer {
  name: "m1@ssh_cls_prob"
  type: "Softmax"
  bottom: "m1@ssh_cls_score_reshape_output"
  top: "m1@ssh_cls_prob_output"
}
layer {
  name: 'm1@ssh_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'm1@ssh_cls_prob_output'
  top: 'm1@ssh_cls_prob_reshape_output'
  reshape_param { shape { dim: 0 dim:4  dim: -1 dim: 0 } }
}
layer {
  name: 'm1@ssh_proposal'
  type: 'Python'
  bottom: 'm1@ssh_cls_prob_reshape_output'
  bottom: 'm1@ssh_bbox_pred_output'
  bottom: 'im_info'
  top: 'm1@ssh_boxes'
  top: 'm1@ssh_cls_prob'
  python_param {
    module: 'SSH.layers.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 8,'scales': [1,2], 'ratios':[1,]}"
  }
}


# CONCAT ALL detections
layer{
  name: "ssh_cls_prob"
  type: "Concat"
  bottom: "m1@ssh_cls_prob"
  bottom: "m2@ssh_cls_prob"
  bottom: "m3@ssh_cls_prob"
  top: "ssh_cls_prob"
  concat_param{
    axis: 0
  }
}

layer{
  name: "ssh_boxes"
  type: "Concat"
  bottom: "m1@ssh_boxes"
  bottom: "m2@ssh_boxes"
  bottom: "m3@ssh_boxes"
  top: "ssh_boxes"
  concat_param{
    axis: 0
  }
}
